 #13. Roman to Integer

 int romanToInt(string s) 
        unordered_map<char, int> roman_values = {
            {'I', 1},
            {'V', 5},
            {'X', 10},
            {'L', 50},
            {'C', 100},
            {'D', 500},
            {'M', 1000}
        };
        
        int total = 0;
        int prev_value = 0;
        
        for (int i = s.length() - 1; i >= 0; i--) {
            int value = roman_values[s[i]];
            
            if (value < prev_value) {
                total -= value;
            } else {
                total += value;
            }
            
            prev_value = value;
        }
        
        return total;





# 9. Palindrome Number Given an integer x, return true if x is a 
palindrome
, and false otherwise.


def is_palindrome(x):
    # Convert the integer to a string
    x_str = str(x)
    
    # Check if the string is equal to its reverse
    return x_str == x_str[::-1]

# Example usage:
x1 = 121
x2 = -121
x3 = 10

result1 = is_palindrome(x1)
result2 = is_palindrome(x2)
result3 = is_palindrome(x3)

print(result1)  # Output: True
print(result2)  # Output: False
print(result3)  # Output: False




#136. Single Number
class Solution {
 public:
  int singleNumber(vector<int>& nums) {
    int ans = 0;

    for (const int num : nums)
      ans ^= num;

    return ans;
  }
};
   






# 66. Plus One
class Solution {
 public:
  vector<int> plusOne(vector<int>& digits) {
    for (int i = digits.size() - 1; i >= 0; --i) {
      if (digits[i] < 9) {
        ++digits[i];
        return digits;
      }
      digits[i] = 0;
    }

    digits.insert(digits.begin(), 1);
    return digits;
  }
};





# 67. add binary 
class Solution {
 public:
  string addBinary(string a, string b) {
    string ans;
    int carry = 0;
    int i = a.length() - 1;
    int j = b.length() - 1;

    while (i >= 0 || j >= 0 || carry) {
      if (i >= 0)
        carry += a[i--] - '0';
      if (j >= 0)
        carry += b[j--] - '0';
      ans += carry % 2 + '0';
      carry /= 2;
    }

    reverse(ans.begin(), ans.end());
    return ans;
  }
};






# 70. climbing staris 

class Solution {
 public:
  int climbStairs(int n) {
    // dp[i] := # of distinct ways to climb to i-th stair
    vector<int> dp(n + 1);
    dp[0] = 1;
    dp[1] = 1;

    for (int i = 2; i <= n; ++i)
      dp[i] = dp[i - 1] + dp[i - 2];

    return dp[n];
  }
}; 








# 183. custommers who never order 

SELECT Customers.name AS Customers
FROM Customers
LEFT JOIN Orders
  ON (Customers.id = Orders.customerId)
WHERE Orders.id IS NULL;








#191. Number of 1 Bits 

class Solution {
 public:
  int hammingWeight(uint32_t n) {
    int ans = 0;

    for (int i = 0; i < 32; ++i)
      if ((n >> i) & 1)
        ++ans;

    return ans;
  }
};






# 27. remove Element 
class Solution {
 public:
  int removeElement(vector<int>& nums, int val) {
    int i = 0;

    for (const int num : nums)
      if (num != val)
        nums[i++] = num;

    return i;
  }
};